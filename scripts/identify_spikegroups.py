"""
Usage:
    spike_study.py <inputfile> <outpath> [options]

Options:
    -m <min_adc>     Minimum ADC count value to be considered [default: 0]

analyze spike data for given inputfile.h5:
inputfile: .h5 file generated by extract_spike_data.py
outpath: path where to put generated inputfile_ident.h5
"""

from docopt import docopt
import numpy as np
import pandas as pd
from tqdm import tqdm
import os


def identify_spike_groups(df):
    """Mark spike data with integer representing its spike order"""
    spike_order = np.ones(len(df))
    j = 0
    for i, row in tqdm(enumerate(df.values)):
        if i == len(df) - 1:
            break
        k = i
        if j is not 0:
            j -= 1
            continue
        while (df["cell_id"].iloc[[i]].values[0] + 1) == df["cell_id"].iloc[[i + 1]].values[0]:
            i += 1
            j += 1
        i = k
        if j is not 0:
            for l in np.arange(j + 1):
                spike_order[i + l] = j + 1

    spike_df = pd.DataFrame(spike_order, columns=["spike_order"])
    df = pd.concat([df, spike_df], axis=1)
    return df


if __name__ == '__main__':
    args = docopt(
        __doc__, version='Dragon Board spike study software v.1.0'
    )

    df = pd.read_hdf(args['<inputfile>'])
    df = df.loc[df['adc'] >= int(args['-m'])] if args['-m'] else df
    df = df.sort_values(by=["pixel", "channel", "event_id", "cell_id"]).reset_index(drop=True)
    df = identify_spike_groups(df)

    outpath = os.path.join(args['<outpath>'], '{}_ident{}.h5'.format(os.path.basename(args['<inputfile>']), int(args['-m'])))
    with pd.HDFStore(outpath, mode='w', comp_level=5, comp_lib='blosc') as store:
        store.append("spikes", df)
