"""
Usage:
    spike_study.py <inputfile> [options]

Options:
    -n <cores>       Cores to use [default: 1]
    -v <verbosity>   Verbosity [default: 10]
    -m <min_adc>     Minimum ADC count value to be considered [default: 0]

analyze spike data for given inputfile.h5:
inputfile: .h5 file generated by extract_spike_data.py
"""

from docopt import docopt
import matplotlib.pyplot as plt
from collections import Counter
import numpy as np
import pandas as pd
import time
from tqdm import tqdm


def identify_spike_groups(df):
    """Mark spike data with integer representing its spike order"""
    spike_order = np.ones(len(df))
    j = 0
    for i, row in tqdm(enumerate(df.values)):
        if i == len(df) - 1:
            break
        k = i
        if j is not 0:
            j -= 1
            continue
        while (df["cell_id"].iloc[[i]].values[0] + 1) == df["cell_id"].iloc[[i + 1]].values[0]:
            i += 1
            j += 1
        i = k
        if j is not 0:
            for l in np.arange(j + 1):
                spike_order[i + l] = j + 1

    spike_df = pd.DataFrame(spike_order, columns=["spike_order"])
    df = pd.concat([df, spike_df], axis=1)
    return df

if __name__ == '__main__':
    args = docopt(
        __doc__, version='Dragon Board spike study software v.1.0'
    )

    df = pd.read_hdf(args['<inputfile>'])
    df = df.loc[df['adc'] >= int(args['-m'])] if args['-m'] else df
    df = df.sort_values(by=["pixel", "channel", "event_id", "cell_id"]).reset_index(drop=True)
    df = identify_spike_groups(df)

    count = Counter(df["spike_order"])
    keys = list(key for key in count.keys())
    values = list(value for value in count.values())
    count = {}
    for i in range(len(keys)):
        count[keys[i]] = int(values[i] / keys[i])

    print(count)





    # Please disregard until final version of the code:

    # print(df.loc[df['event_id'] >= 584])
    # df.hist(column="sample_id", bins=80)
    # print(spike_order)
    # print(e)
    # print(df)
    # print(df.iloc[[10]])
    # print(len(df.index))
    # print(df.index)

    # print(count.keys())
    # print(keys)
    # print(count.values())
    # print(values)
    # count100 = list(cell for cell in count.keys() if count[cell] > 100)
    # sum_spikes = 0
    # for cell in count100:
    #     sum_spikes += count[cell]
    # print(sum_spikes)
    # print(count100)
    # print(np.diff(count100))

    # [adc, pixel, channel, event_id, cell_id, sample_id]
    # [23,2,"high",502,19] links correctly to the following @skip=500
    # plt.plot(calib_events[1].data[2]["high"][5:36])

    # plt.style.use('ggplot')
    # plt.title("Histogram: Sample_id ADC > {} ({} triple-or-higher spikes)".format(min_adc, len(spikes)))
    # plt.xlabel("Sample_id")
    # plt.ylabel("Occurence")

    plt.show()
